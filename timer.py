import asyncio
import time
from steps import POSITIONS, DURATIONS_MIN, format_duration
from keyboards import get_continue_keyboard, control_keyboard_full
from state import user_state, tasks, step_completion_shown
from texts import GREETING

async def timer(uid, seconds, bot, msg):
    start = time.monotonic()
    bar_states = [
        "‚òÄÔ∏èüåëüåëüåëüåëüåëüåëüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåëüåëüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåëüåëüåëüåë",
        "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåë",
        "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåë",
        "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è"
    ]
    last_state = ""
    while True:
        elapsed = time.monotonic() - start
        remaining = max(0, int(seconds - elapsed))
        percent_done = min(elapsed / seconds, 1.0)
        bar_index = min(int(percent_done * 10), 9)

        bar = bar_states[bar_index]
        minutes = remaining // 60
        seconds_remain = remaining % 60
        time_label = f"{minutes} –º–∏–Ω {seconds_remain} —Å–µ–∫" if minutes > 0 else f"{seconds_remain} —Å–µ–∫"
        text = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {time_label}\n{bar}"

        if text != last_state:
            try:
                await bot.edit_message_text(
                    text=msg.text.split("\n")[0] + "\n" + text,
                    chat_id=uid,
                    message_id=msg.message_id
                )
            except:
                pass
            last_state = text

        if remaining <= 0:
            break
        await asyncio.sleep(2)

    if uid in user_state:
        await start_position(uid, bot)

async def start_position(uid, bot):
    state = user_state.get(uid)
    if not state:
        return
    step = state["step"]
    pos = state["position"]
    if step > 12:
        await bot.send_message(
            uid,
            "–¢—ã –ø—Ä–æ—à—ë–ª(–ª–∞) 12 —à–∞–≥–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚òÄÔ∏è\n–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ.",
            reply_markup=control_keyboard_full
        )
        return
    try:
        name = POSITIONS[pos]
        dur = DURATIONS_MIN[step-1][pos]
        message = await bot.send_message(uid, f"{name} ‚Äî {format_duration(dur)}\n‚è≥ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω...")
        state["position"] += 1
        tasks[uid] = asyncio.create_task(timer(uid, int(dur * 60), bot, message))
    except IndexError:
        if step == 12:
            await bot.send_message(uid, "–¢—ã –ø—Ä–æ—à—ë–ª(–ª–∞) 12 —à–∞–≥–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚òÄÔ∏è\n–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ.", reply_markup=control_keyboard_full)
        elif uid not in step_completion_shown:
            step_completion_shown.add(uid)
            message = "–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–∏—Ä–∞–π ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –æ—Ç–¥–æ—Ö–Ω–∏ ‚òÄÔ∏è."
            if step <= 2:
                message += "\n–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –≤–µ—Ä–Ω–∏—Å—å –Ω–∞ —à–∞–≥ 1."
            else:
                message += "\n–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –≤–µ—Ä–Ω–∏—Å—å –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥."
            await bot.send_message(uid, message, reply_markup=get_continue_keyboard(step))
