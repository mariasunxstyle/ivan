from aiogram import types
from bot import bot, dp
import asyncio, time

from texts import GREETING, INFO_TEXT
from keyboards import POSITIONS, DURATIONS_MIN, format_duration
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from state import user_state, tasks, step_completion_shown

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ===

steps_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
step_buttons = []
for i, row in enumerate(DURATIONS_MIN):
    total = sum(row)
    h = int(total // 60)
    m = int(total % 60)
    label = f"–®–∞–≥ {i + 1} ({f'{h} —á ' if h else ''}{m} –º–∏–Ω)"
    step_buttons.append(KeyboardButton(label))
for i in range(0, len(step_buttons), 4):
    steps_keyboard.add(*step_buttons[i:i + 4])
steps_keyboard.add(KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))

def get_control_keyboard(step):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    kb.add(KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
    kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ —à–∞–≥ 1 (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)") if step <= 2 else KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞)"))
    kb.add(KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))
    return kb

def get_continue_keyboard(step):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
    kb.add(KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))
    kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ —à–∞–≥ 1 (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)") if step <= 2 else KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞)"))
    kb.add(KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
    return kb

control_keyboard_full = ReplyKeyboardMarkup(resize_keyboard=True)
control_keyboard_full.add(KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))
control_keyboard_full.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞)"))
control_keyboard_full.add(KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"))

end_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
end_keyboard.add(
    KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"),
    KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞)")
)

@dp.message_handler(commands=['start'])
async def send_welcome(msg: types.Message):
    await msg.answer(GREETING, reply_markup=steps_keyboard)

@dp.message_handler(commands=['info'])
@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def info(msg: types.Message):
    await msg.answer(INFO_TEXT)

@dp.message_handler(lambda m: m.text.startswith("–®–∞–≥ "))
async def handle_step(msg: types.Message):
    step = int(msg.text.split()[1])
    user_state[msg.chat.id] = {"step": step, "position": 0}
    step_completion_shown.discard(msg.chat.id)
    await start_position(msg.chat.id)

async def start_position(uid):
    state = user_state.get(uid)
    if not state:
        return
    step = state["step"]
    pos = state["position"]
    if step > 12:
        await bot.send_message(uid, "–¢—ã –ø—Ä–æ—à—ë–ª(–ª–∞) 12 —à–∞–≥–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚òÄÔ∏è\n–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ.", reply_markup=control_keyboard_full)
–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ.", reply_markup=control_keyboard_full)
        return
    try:
        name = POSITIONS[pos]
        dur = DURATIONS_MIN[step-1][pos]
        message = await bot.send_message(uid, f"{name} ‚Äî {format_duration(dur)}
‚è≥ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω...")
        state["position"] += 1
        tasks[uid] = asyncio.create_task(timer(uid, int(dur * 60), message))
    except IndexError:
        if step == 12:
            await bot.send_message(uid, "–¢—ã –ø—Ä–æ—à—ë–ª(–ª–∞) 12 —à–∞–≥–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚òÄÔ∏è
–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ.", reply_markup=control_keyboard_full)
        elif uid not in step_completion_shown:
            step_completion_shown.add(uid)
            message = "–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–∏—Ä–∞–π ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –æ—Ç–¥–æ—Ö–Ω–∏ ‚òÄÔ∏è."
            message += "
–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –≤–µ—Ä–Ω–∏—Å—å –Ω–∞ —à–∞–≥ 1." if step <= 2 else "
–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –≤–µ—Ä–Ω–∏—Å—å –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥."
            await bot.send_message(uid, message, reply_markup=get_continue_keyboard(step))

async def timer(uid, seconds, msg):
    start = time.monotonic()
    bar_states = ["‚òÄÔ∏èüåëüåëüåëüåëüåëüåëüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåëüåëüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåëüåëüåëüåë",
        "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåë",
        "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåë",
        "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è"]
    last_state = ""
    while True:
        elapsed = time.monotonic() - start
        remaining = max(0, int(seconds - elapsed))
        percent_done = min(elapsed / seconds, 1.0)
        bar_index = min(int(percent_done * 10), 9)
        bar = bar_states[bar_index]
        minutes = remaining // 60
        seconds_remain = remaining % 60
        time_label = f"{minutes} –º–∏–Ω {seconds_remain} —Å–µ–∫" if minutes > 0 else f"{seconds_remain} —Å–µ–∫"
        text = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {time_label}
{bar}"
        if text != last_state:
            try:
                await bot.edit_message_text(text=msg.text.split("\n")[0] + "\n" + text, chat_id=uid, message_id=msg.message_id)
            except:
                pass
            last_state = text
        if remaining <= 0:
            break
        await asyncio.sleep(2)
    if uid in user_state:
        await start_position(uid)

@dp.message_handler(lambda m: m.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip(msg: types.Message):
    uid = msg.chat.id
    t = tasks.pop(uid, None)
    if t: t.cancel()
    await start_position(uid)

@dp.message_handler(lambda m: m.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def end(msg: types.Message):
    uid = msg.chat.id
    t = tasks.pop(uid, None)
    if t: t.cancel()
    user_state[uid] = {"last_step": user_state.get(uid, {}).get("step", 1)}
    step_completion_shown.discard(uid)
    await bot.send_message(uid, "–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è", reply_markup=end_keyboard)

@dp.message_handler(lambda m: m.text.startswith("‚Ü©Ô∏è"))
async def back(msg: types.Message):
    uid = msg.chat.id
    state = user_state.get(uid)
    if not state:
        last = user_state.get(uid, {}).get("last_step", 1)
        user_state[uid] = {"step": 1, "position": 0} if last <= 2 else {"step": last - 2, "position": 0}
    else:
        step = state["step"]
        state["step"] = 1 if step <= 2 else step - 2
        state["position"] = 0
    step_completion_shown.discard(uid)
    await bot.send_message(uid, f"–®–∞–≥ {user_state[uid]['step']}")
    await start_position(uid)

@dp.message_handler(lambda m: m.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
async def menu(msg: types.Message):
    uid = msg.chat.id
    t = tasks.pop(uid, None)
    if t: t.cancel()
    user_state.pop(uid, None)
    step_completion_shown.discard(uid)
    await msg.answer("–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=steps_keyboard)

@dp.message_handler(lambda m: m.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def continue_step(msg: types.Message):
    uid = msg.chat.id
    state = user_state.get(uid)
    if not state:
        return
    state["step"] += 1
    state["position"] = 0
    step_completion_shown.discard(uid)
    await bot.send_message(uid, f"–®–∞–≥ {state['step']}")
    await start_position(uid)
