import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from steps import steps
import os

API_TOKEN = os.getenv("TOKEN") or "–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Å–≤–æ–π_—Ç–æ–∫–µ–Ω"
CHANNEL_USERNAME = "@sunxstyle"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class SessionState(StatesGroup):
    tanning = State()

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    buttons = [KeyboardButton(f"–®–∞–≥ {s['step']} ‚Äî {s['duration_min']} –º–∏–Ω") for s in steps]
    keyboard.add(*buttons)
    keyboard.add(KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))
    return keyboard

def get_control_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    keyboard.add(KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
    keyboard.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞"))
    keyboard.add(KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))
    return keyboard

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    chat_member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
    if chat_member.status not in ["member", "creator", "administrator"]:
        await message.answer("–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @sunxstyle, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")
        return

    text = (
        "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è\n"
        "–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.\n"
        "–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ‚Äî –∏ –∑–∞–≥–∞—Ä –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–æ–≤–Ω—ã–º, –≥–ª—É–±–æ–∫–∏–º –∏ –±–µ–∑ –æ–∂–æ–≥–æ–≤.\n\n"
        "–ú–µ—Ç–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–∞—É—á–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö: –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –≤—ã—Ä–∞–±–æ—Ç–∫—É –º–µ–ª–∞–Ω–∏–Ω–∞ –∏ –≥–æ—Ä–º–æ–Ω–æ–≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.\n"
        "–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –æ–∂–æ–≥–æ–≤ –∏ –¥–µ–ª–∞–µ—Ç –∑–∞–≥–∞—Ä —É—Å—Ç–æ–π—á–∏–≤—ã–º.\n\n"
        "–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1 ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞).\n"
        "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.\n\n"
        "–•–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Äî –∂–º–∏ /info."
    )
    await message.answer(text, reply_markup=get_main_keyboard())

@dp.message_handler(lambda message: message.text.startswith("–®–∞–≥ "))
async def handle_step(message: types.Message, state: FSMContext):
    step_num = int(message.text.split()[1])
    step = next(s for s in steps if s['step'] == step_num)
    await message.answer(f"–®–∞–≥ {step_num} –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤—å—Å—è ‚òÄÔ∏è")
    await state.update_data(step=step_num, position_index=0)
    await SessionState.tanning.set()
    await run_positions(message.chat.id, step_num, state)

async def run_positions(chat_id, step_num, state: FSMContext):
    step = next(s for s in steps if s['step'] == step_num)
    data = await state.get_data()
    position_index = data.get("position_index", 0)

    if position_index >= len(step['positions']):
        await bot.send_message(chat_id, f"–®–∞–≥ {step_num} –∑–∞–≤–µ—Ä—à—ë–Ω! ‚òÄÔ∏è\n–í—ã–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏–ª–∏ –æ—Ç–¥–æ—Ö–Ω–∏.", reply_markup=get_main_keyboard())
        await state.finish()
        return

    pos = step['positions'][position_index]
    duration = int(pos['minutes'] * 60)
    await bot.send_message(chat_id, f"{pos['name']} ‚Äî {pos['minutes']} –º–∏–Ω", reply_markup=get_control_keyboard())
    await asyncio.sleep(duration)

    await state.update_data(position_index=position_index + 1)
    await run_positions(chat_id, step_num, state)

@dp.message_handler(lambda message: message.text in ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å", "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞", "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"])
async def handle_controls(message: types.Message, state: FSMContext):
    data = await state.get_data()
    step_num = data.get("step")
    position_index = data.get("position_index", 0)

    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(position_index=position_index + 1)
        await run_positions(message.chat.id, step_num, state)

    elif message.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å":
        await state.finish()
        await message.answer("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è", reply_markup=get_main_keyboard())

    elif message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞":
        target_step = max(1, step_num - 2)
        await message.answer(f"–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è(–∞—Å—å) –∫ —à–∞–≥—É {target_step} ‚òÄÔ∏è", reply_markup=get_main_keyboard())
        await state.finish()

    elif message.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º":
        await message.answer("üìã –í—ã–±–µ—Ä–∏ —à–∞–≥", reply_markup=get_main_keyboard())
        await state.finish()

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def show_info(message: types.Message):
    info = (
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ\n"
        "–ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≥–∞—Ä–∞.\n"
        "–¢—ã –ø—Ä–æ—Ö–æ–¥–∏—à—å 12 —à–∞–≥–æ–≤ ‚Äî –∫–∞–∂–¥—ã–π —Å —Ç–∞–π–º–∏–Ω–≥–æ–º –∏ —Å–º–µ–Ω–æ–π –ø–æ–∑–∏—Ü–∏–π.\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –ù–∞—á–Ω–∏ —Å —à–∞–≥–∞ 1\n"
        "2. –í–∫–ª—é—á–∏ —Ç–∞–π–º–µ—Ä –∏ —Å–ª–µ–¥—É–π –ø–æ–∑–∏—Ü–∏—è–º\n"
        "3. –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥\n"
        "4. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 12 —à–∞–≥–æ–≤ ‚Äî –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º —Ä–∏—Ç–º–µ\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–æ—Ä–∞—Ç—å —Å 7:00 –¥–æ 11:00 –∏ –ø–æ—Å–ª–µ 17:00 ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–ª–Ω—Ü–µ –º—è–≥–∫–æ–µ, –∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞–≥–æ—Ä–∞—Ç—å –±–µ–∑ SPF.\n"
        "–° 11:00 –¥–æ 17:00 ‚Äî —Å–æ–ª–Ω—Ü–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ. –ï—Å–ª–∏ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ ‚Äî –Ω–∞–¥–µ–≤–∞–π –æ–¥–µ–∂–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π SPF.\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @sunxbeach_director"
    )
    await message.answer(info)

if __name__ == '__main__':
    executor.start_polling(dp)
