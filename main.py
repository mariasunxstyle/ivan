import asyncio
import logging
import os
import time
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

API_TOKEN = os.getenv("TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

POSITIONS = ["–õ–∏—Ü–æ–º –≤–≤–µ—Ä—Ö", "–ù–∞ –∂–∏–≤–æ—Ç–µ", "–õ–µ–≤—ã–π –±–æ–∫", "–ü—Ä–∞–≤—ã–π –±–æ–∫", "–í —Ç–µ–Ω–∏"]
DURATIONS_MIN = [
    [1.5, 1.5, 1.0, 1.0, 3.0],
    [2.0, 2.0, 1.0, 1.0, 3.0],
    [3.0, 3.0, 1.5, 1.5, 5.0],
    [5.0, 5.0, 2.5, 2.5, 5.0],
    [7.0, 7.0, 3.0, 3.0, 7.0],
    [9.0, 9.0, 5.0, 5.0, 10.0],
    [12.0, 12.0, 7.0, 7.0, 10.0],
    [15.0, 15.0, 10.0, 10.0, 10.0],
    [20.0, 20.0, 15.0, 15.0, 15.0],
    [25.0, 25.0, 20.0, 20.0, 20.0],
    [35.0, 35.0, 25.0, 25.0, 30.0],
    [45.0, 45.0, 30.0, 30.0, 40.0]
]

def format_duration(mins):
    return f"{int(mins)} –º–∏–Ω" if mins == int(mins) else f"{int(mins)} –º–∏–Ω {int((mins - int(mins)) * 60)} —Å–µ–∫"

steps_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
for i, row in enumerate(DURATIONS_MIN):
    total = sum(row)
    h = int(total // 60)
    m = int(total % 60)
    label = f"–®–∞–≥ {i + 1} ({f'{h} —á ' if h else ''}{m} –º–∏–Ω)"
    steps_keyboard.insert(KeyboardButton(label))
steps_keyboard.add(KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))

def get_control_keyboard(step):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    kb.add(KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
    if step <= 2:
        kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ —à–∞–≥ 1 (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)"))
    else:
        kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞)"))
    kb.add(KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))
    return kb

def get_continue_keyboard(step):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
    kb.add(KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))
    if step <= 2:
        kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ —à–∞–≥ 1 (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)"))
    else:
        kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞)"))
    return kb

def get_end_keyboard(step):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))
    kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞)"))
    return kb

@dp.message_handler(commands=['start'])
async def send_welcome(msg: types.Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è\n–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.\n–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ‚Äî –∏ –∑–∞–≥–∞—Ä –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–æ–≤–Ω—ã–º, –≥–ª—É–±–æ–∫–∏–º –∏ –±–µ–∑ –æ–∂–æ–≥–æ–≤.\n\n–ú–µ—Ç–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–∞—É—á–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö: –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –≤—ã—Ä–∞–±–æ—Ç–∫—É –º–µ–ª–∞–Ω–∏–Ω–∞ –∏ –≥–æ—Ä–º–æ–Ω–æ–≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.\n–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –æ–∂–æ–≥–æ–≤ –∏ –¥–µ–ª–∞–µ—Ç –∑–∞–≥–∞—Ä —É—Å—Ç–æ–π—á–∏–≤—ã–º.\n\n–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1 ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞).\n–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.\n\n–•–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Äî –∂–º–∏ /info.", reply_markup=steps_keyboard)

@dp.message_handler(commands=['info'])
@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def info(msg: types.Message):
    await msg.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ\n–ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≥–∞—Ä–∞.\n–¢—ã –ø—Ä–æ—Ö–æ–¥–∏—à—å 12 —à–∞–≥–æ–≤ ‚Äî –∫–∞–∂–¥—ã–π —Å —Ç–∞–π–º–∏–Ω–≥–æ–º –∏ —Å–º–µ–Ω–æ–π –ø–æ–∑–∏—Ü–∏–π.\n\n–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n1. –ù–∞—á–Ω–∏ —Å —à–∞–≥–∞ 1\n2. –í–∫–ª—é—á–∏ —Ç–∞–π–º–µ—Ä –∏ —Å–ª–µ–¥—É–π –ø–æ–∑–∏—Ü–∏—è–º\n3. –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥\n4. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 12 —à–∞–≥–æ–≤ ‚Äî –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º —Ä–∏—Ç–º–µ\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–æ—Ä–∞—Ç—å —Å 7:00 –¥–æ 11:00 –∏ –ø–æ—Å–ª–µ 17:00 ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–ª–Ω—Ü–µ –º—è–≥–∫–æ–µ,\n–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞–≥–æ—Ä–∞—Ç—å –±–µ–∑ SPF.\n–° 11:00 –¥–æ 17:00 ‚Äî —Å–æ–ª–Ω—Ü–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ. –ï—Å–ª–∏ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ ‚Äî\n–Ω–∞–¥–µ–≤–∞–π –æ–¥–µ–∂–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π SPF.\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @sunxbeach_director")
@dp.message_handler(lambda m: m.text.startswith("–®–∞–≥ "))
async def handle_step(msg: types.Message):
    uid = msg.chat.id
    t = tasks.pop(uid, None)
    if t: t.cancel()
    step = int(msg.text.split()[1])
    if step > 12:
        await bot.send_message(uid, "–¢—ã –ø—Ä–æ—à—ë–ª(–ª–∞) 12 —à–∞–≥–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚òÄÔ∏è\n–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ.", reply_markup=get_end_keyboard(12))
        return
    user_state[uid] = {"step": step, "position": 0}
    step_completion_shown.discard(uid)
    await start_position(uid)

async def start_position(uid):
    state = user_state.get(uid)
    if not state:
        return
    step = state["step"]
    if step > 12:
        await bot.send_message(uid, "–¢—ã –ø—Ä–æ—à—ë–ª(–ª–∞) 12 —à–∞–≥–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚òÄÔ∏è\n–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ.", reply_markup=get_end_keyboard(12))
        return
    pos = state["position"]
    try:
        name = POSITIONS[pos]
        dur = DURATIONS_MIN[step-1][pos]
        msg = await bot.send_message(uid, f"{name} ‚Äî {format_duration(dur)}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ...", reply_markup=get_control_keyboard(step))
        state["position"] += 1
        if uid in tasks:
            tasks[uid].cancel()
        tasks[uid] = asyncio.create_task(timer(uid, int(dur * 60), msg))
    except IndexError:
        if uid not in step_completion_shown:
            step_completion_shown.add(uid)
            message = "–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–∏—Ä–∞–π ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –æ—Ç–¥–æ—Ö–Ω–∏ ‚òÄÔ∏è."
            if step <= 2:
                message += "\n–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –≤–µ—Ä–Ω–∏—Å—å –Ω–∞ —à–∞–≥ 1."
            else:
                message += "\n–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –≤–µ—Ä–Ω–∏—Å—å –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥."
            await bot.send_message(uid, message, reply_markup=get_continue_keyboard(step))

async def timer(uid, seconds, msg):
    start = time.monotonic()
    while True:
        elapsed = time.monotonic() - start
        remaining = max(0, int(seconds - elapsed))
        minutes = remaining // 60
        seconds_remain = remaining % 60
        time_text = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {minutes} –º–∏–Ω {seconds_remain} —Å–µ–∫" if minutes else f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {seconds_remain} —Å–µ–∫"
        new_text = f"{msg.text.splitlines()[0]}\n{time_text}"
        try:
            await bot.edit_message_text(chat_id=uid, message_id=msg.message_id, text=new_text)
        except:
            pass
        if remaining <= 0:
            break
        await asyncio.sleep(1)

    if uid in user_state:
        await start_position(uid)

@dp.message_handler(lambda m: m.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip(msg: types.Message):
    uid = msg.chat.id
    t = tasks.pop(uid, None)
    if t: t.cancel()
    await start_position(uid)

@dp.message_handler(lambda m: m.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def end(msg: types.Message):
    uid = msg.chat.id
    t = tasks.pop(uid, None)
    if t: t.cancel()
    state = user_state.get(uid)
    if state:
        user_state[uid] = {"last_step": state.get("step", 1)}
    else:
        user_state[uid] = {"last_step": 1}
    step = user_state[uid].get("last_step", 1)
    step_completion_shown.discard(uid)
    await bot.send_message(
        uid,
        "–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"),
            KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞)") if step > 2 else KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ —à–∞–≥ 1 (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)")
        )
    )

@dp.message_handler(lambda m: m.text.startswith("‚Ü©Ô∏è"))
async def back(msg: types.Message):
    uid = msg.chat.id
    t = tasks.pop(uid, None)
    if t: t.cancel()
    last = user_state.get(uid, {}).get("last_step", 1)
    step = 1 if last <= 2 else last - 2
    user_state[uid] = {"step": step, "position": 0}
    step_completion_shown.discard(uid)
    await bot.send_message(uid, f"–®–∞–≥ {step}")
    await start_position(uid)

@dp.message_handler(lambda m: m.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
async def menu(msg: types.Message):
    uid = msg.chat.id
    t = tasks.pop(uid, None)
    if t: t.cancel()
    user_state.pop(uid, None)
    step_completion_shown.discard(uid)
    await msg.answer("–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=steps_keyboard)

@dp.message_handler(lambda m: m.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def continue_step(msg: types.Message):
    uid = msg.chat.id
    t = tasks.pop(uid, None)
    if t: t.cancel()
    state = user_state.get(uid)
    if not state:
        return
    step = state["step"] + 1
    if step > 12:
        await bot.send_message(uid, "–¢—ã –ø—Ä–æ—à—ë–ª(–ª–∞) 12 —à–∞–≥–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚òÄÔ∏è\n–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ.", reply_markup=get_end_keyboard(12))
        return
    user_state[uid] = {"step": step, "position": 0}
    step_completion_shown.discard(uid)
    await bot.send_message(uid, f"–®–∞–≥ {step}")
    await start_position(uid)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
