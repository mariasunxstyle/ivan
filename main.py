# main.py –¥–ª—è –±–æ—Ç–∞ SUNXSTYLE

import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from handlers import (
    steps_keyboard, control_keyboard, control_keyboard_full_vertical, control_keyboard_end,
    POSITIONS, DURATIONS_MIN, format_duration,
    STEP_COMPLETED_MESSAGE, ALL_STEPS_DONE_MESSAGE, SESSION_TERMINATED_MESSAGE,
    GREETING, INFO_TEXT
)

API_TOKEN = os.getenv("TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}
tasks = {}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("""–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è
–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.
–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ‚Äî –∏ –∑–∞–≥–∞—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–æ–≤–Ω—ã–º, –≥–ª—É–±–æ–∫–∏–º –∏ –±–µ–∑ –æ–∂–æ–≥–æ–≤.

–ú–µ—Ç–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–∞—É—á–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö: –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –≤—ã—Ä–∞–±–æ—Ç–∫—É –º–µ–ª–∞–Ω–∏–Ω–∞ –∏ –≥–æ—Ä–º–æ–Ω–æ–≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.
–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –æ–∂–æ–≥–æ–≤ –∏ –¥–µ–ª–∞–µ—Ç –∑–∞–≥–∞—Ä —É—Å—Ç–æ–π—á–∏–≤—ã–º.

–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1 ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞).
–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.

–•–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Äî –∂–º–∏ /info.", reply_markup=steps_keyboard)

# –ò–Ω—Ñ–æ
@dp.message_handler(commands=['info'])
@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def send_info(message: types.Message):
    await message.answer("""‚ÑπÔ∏è –ò–Ω—Ñ–æ
–ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≥–∞—Ä–∞.
–¢—ã –ø—Ä–æ—Ö–æ–¥–∏—à—å 12 —à–∞–≥–æ–≤ ‚Äî –∫–∞–∂–¥—ã–π —Å —Ç–∞–π–º–∏–Ω–≥–æ–º –∏ —Å–º–µ–Ω–æ–π –ø–æ–∑–∏—Ü–∏–π.

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ù–∞—á–Ω–∏ —Å —à–∞–≥–∞ 1
2. –í–∫–ª—é—á–∏ —Ç–∞–π–º–µ—Ä –∏ —Å–ª–µ–¥—É–π –ø–æ–∑–∏—Ü–∏—è–º
3. –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥
4. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 12 —à–∞–≥–æ–≤ ‚Äî –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º —Ä–∏—Ç–º–µ

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–æ—Ä–∞—Ç—å —Å 7:00 –¥–æ 11:00 –∏ –ø–æ—Å–ª–µ 17:00 ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–ª–Ω—Ü–µ –º—è–≥–∫–æ–µ, –∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞–≥–æ—Ä–∞—Ç—å –±–µ–∑ SPF.
–° 11:00 –¥–æ 17:00 ‚Äî —Å–æ–ª–Ω—Ü–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ. –ï—Å–ª–∏ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ ‚Äî –Ω–∞–¥–µ–≤–∞–π –æ–¥–µ–∂–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π SPF.

–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏: @sunxbeach_director""")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–≥–∞
@dp.message_handler(lambda m: m.text.startswith("–®–∞–≥ "))
async def handle_step(message: types.Message):
    user_id = message.chat.id
    step_num = int(message.text.split()[1])
    user_state[user_id] = {"step": step_num, "position": 0}
    await start_position(user_id)

# –ù–∞—á–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å —Ç–∞–π–º–µ—Ä–æ–º
async def start_position(user_id):
    state = user_state.get(user_id)
    if not state:
        return
    step = state['step']
    pos = state['position']
    if step > 12:
        await bot.send_message(user_id, ALL_STEPS_DONE_MESSAGE, reply_markup=control_keyboard_end)
        user_state.pop(user_id, None)
        return
    try:
        position_name = POSITIONS[pos]
        duration = DURATIONS_MIN[step - 1][pos]
        state['position'] += 1
        tasks[user_id] = asyncio.create_task(position_timer(user_id, position_name, duration, step))
    except IndexError:
        await bot.send_message(user_id, STEP_COMPLETED_MESSAGE, reply_markup=control_keyboard_full_vertical)

# –¢–∞–π–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
async def position_timer(user_id, name, minutes, step):
    await bot.send_message(user_id, f"{name} ‚Äî {format_duration(minutes)}", reply_markup=control_keyboard)
    await asyncio.sleep(minutes * 60)
    state = user_state.get(user_id)
    if state and state['position'] >= len(POSITIONS):
        await bot.send_message(user_id, STEP_COMPLETED_MESSAGE, reply_markup=control_keyboard_full_vertical)
    else:
        await start_position(user_id)

# –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
@dp.message_handler(lambda m: m.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_position(message: types.Message):
    user_id = message.chat.id
    task = tasks.pop(user_id, None)
    if task:
        task.cancel()
    state = user_state.get(user_id)
    if state and state['position'] >= len(POSITIONS):
        await bot.send_message(user_id, STEP_COMPLETED_MESSAGE, reply_markup=control_keyboard_full_vertical)
    else:
        await start_position(user_id)

# –ó–∞–≤–µ—Ä—à–∏—Ç—å
@dp.message_handler(lambda m: m.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def end_session(message: types.Message):
    user_id = message.chat.id
    task = tasks.pop(user_id, None)
    if task:
        task.cancel()
    await bot.send_message(user_id, STEP_COMPLETED_MESSAGE, reply_markup=control_keyboard_end)
    user_state.pop(user_id, None)

# –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞
@dp.message_handler(lambda m: m.text.startswith("‚Ü©Ô∏è"))
async def go_back(message: types.Message):
    user_id = message.chat.id
    state = user_state.get(user_id)
    if not state:
        return
    if state['step'] <= 2:
        state['step'] = 1
    else:
        state['step'] -= 2
    state['position'] = 0
    step_num = state['step']
    await bot.send_message(user_id, f"–®–∞–≥ {step_num}")
    await asyncio.sleep(0.5)
    await start_position(user_id)

# –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º
@dp.message_handler(lambda m: m.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
async def back_to_steps(message: types.Message):
    user_id = message.chat.id
    task = tasks.pop(user_id, None)
    if task:
        task.cancel()
    user_state.pop(user_id, None)
    await message.answer("–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=steps_keyboard)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

