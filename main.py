async def start_position(uid):
    state = user_state.get(uid)
    if not state:
        return
    step = state["step"]
    pos = state["position"]
    if step > 12:
        await bot.send_message(uid, "–¢—ã –ø—Ä–æ—à—ë–ª(–ª–∞) 12 —à–∞–≥–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚òÄÔ∏è\n–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ.", reply_markup=get_end_keyboard(step))
        return
    try:
        name = POSITIONS[pos]
        dur = DURATIONS_MIN[step-1][pos]
        msg = await bot.send_message(uid, f"{name} ‚Äî {format_duration(dur)}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ...", reply_markup=get_control_keyboard(step))
        state["position"] += 1
        if uid in tasks:
            tasks[uid].cancel()
        tasks[uid] = asyncio.create_task(timer(uid, int(dur * 60), msg))
    except IndexError:
        if uid not in step_completion_shown:
            step_completion_shown.add(uid)
            message = "–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–∏—Ä–∞–π ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –æ—Ç–¥–æ—Ö–Ω–∏ ‚òÄÔ∏è."
            if step <= 2:
                message += "\n–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –≤–µ—Ä–Ω–∏—Å—å –Ω–∞ —à–∞–≥ 1."
            else:
                message += "\n–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –≤–µ—Ä–Ω–∏—Å—å –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥."
            await bot.send_message(uid, message, reply_markup=get_continue_keyboard(step))

async def timer(uid, seconds, msg):
    start = time.monotonic()
    last_text = ""
    while True:
        elapsed = time.monotonic() - start
        remaining = max(0, int(seconds - elapsed))
        if remaining <= 0:
            break
        minutes = remaining // 60
        seconds_remain = remaining % 60
        time_str = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {minutes:02d}:{seconds_remain:02d}"
        new_text = f"{msg.text.splitlines()[0]}\n{time_str}"
        if new_text != last_text:
            try:
                await bot.edit_message_text(new_text, chat_id=uid, message_id=msg.message_id, reply_markup=get_control_keyboard(user_state[uid]['step']))
                last_text = new_text
            except:
                pass
        await asyncio.sleep(1)
    if uid in user_state:
        await start_position(uid)

@dp.message_handler(lambda m: m.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip(msg: types.Message):
    uid = msg.chat.id
    t = tasks.pop(uid, None)
    if t: t.cancel()
    await start_position(uid)

@dp.message_handler(lambda m: m.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def end(msg: types.Message):
    uid = msg.chat.id
    t = tasks.pop(uid, None)
    if t: t.cancel()
    state = user_state.get(uid)
    if state:
        user_state[uid] = {"last_step": state.get("step", 1)}
    else:
        user_state[uid] = {"last_step": 1}
    step = user_state[uid].get("last_step", 1)
    step_completion_shown.discard(uid)
    await bot.send_message(
        uid,
        "–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"),
            KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞)") if step > 2 else KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ —à–∞–≥ 1 (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)")
        )
    )
