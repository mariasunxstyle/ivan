import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

from keyboards import steps_keyboard, get_control_keyboard
from state import user_state, tasks, step_completion_shown
from texts import GREETING, INFO_TEXT
from timer import start_position

load_dotenv()
API_TOKEN = os.getenv("TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def send_welcome(msg: types.Message):
    await msg.answer(GREETING, reply_markup=steps_keyboard)

@dp.message_handler(commands=['info'])
@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def info(msg: types.Message):
    await msg.answer(INFO_TEXT)

@dp.message_handler(lambda m: m.text.startswith("–®–∞–≥ "))
async def handle_step(msg: types.Message):
    try:
        step = int(msg.text.split()[1])
    except:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à–∞–≥–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    user_state[msg.chat.id] = {"step": step, "position": 0}
    step_completion_shown.discard(msg.chat.id)
    await start_position(bot, msg.chat.id)

@dp.message_handler(lambda m: m.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
async def back_to_steps(msg: types.Message):
    await msg.answer("–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=steps_keyboard)

@dp.message_handler(lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞")
@dp.message_handler(lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)")
async def step_back(msg: types.Message):
    state = user_state.get(msg.chat.id)
    if state:
        current_step = state.get("step", 1)
        new_step = max(1, current_step - 2)
        user_state[msg.chat.id] = {"step": new_step, "position": 0}
        step_completion_shown.discard(msg.chat.id)
        await msg.answer(f"–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —à–∞–≥ {new_step}.")
        await start_position(bot, msg.chat.id)

@dp.message_handler(lambda m: m.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def end_session(msg: types.Message):
    tasks.pop(msg.chat.id, None)
    step_completion_shown.discard(msg.chat.id)
    await msg.answer("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è",
                     reply_markup=get_control_keyboard())

@dp.message_handler(lambda m: m.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_position(msg: types.Message):
    from timer import skip_to_next_position
    await skip_to_next_position(bot, msg.chat.id)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
