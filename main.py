import asyncio
import logging
import os
import time
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

API_TOKEN = os.getenv("TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

POSITIONS = ["–õ–∏—Ü–æ–º –≤–≤–µ—Ä—Ö", "–ù–∞ –∂–∏–≤–æ—Ç–µ", "–õ–µ–≤—ã–π –±–æ–∫", "–ü—Ä–∞–≤—ã–π –±–æ–∫", "–í —Ç–µ–Ω–∏"]
DURATIONS_MIN = [
    [1.5, 1.5, 1.0, 1.0, 3.0],
    [2.0, 2.0, 1.0, 1.0, 3.0],
    [3.0, 3.0, 1.5, 1.5, 5.0],
    [5.0, 5.0, 2.5, 2.5, 5.0],
    [7.0, 7.0, 3.0, 3.0, 7.0],
    [9.0, 9.0, 5.0, 5.0, 10.0],
    [12.0, 12.0, 7.0, 7.0, 10.0],
    [15.0, 15.0, 10.0, 10.0, 10.0],
    [20.0, 20.0, 15.0, 15.0, 15.0],
    [25.0, 25.0, 20.0, 20.0, 20.0],
    [35.0, 35.0, 25.0, 25.0, 30.0],
    [45.0, 45.0, 30.0, 30.0, 40.0],
]

def format_duration(mins):
    return f"{int(mins)} –º–∏–Ω" if mins == int(mins) else f"{int(mins)} –º–∏–Ω {int((mins - int(mins)) * 60)} —Å–µ–∫"

steps_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
step_buttons = []
for i, row in enumerate(DURATIONS_MIN):
    total = sum(row)
    h = int(total // 60)
    m = int(total % 60)
    label = f"–®–∞–≥ {i + 1} ({f'{h} —á ' if h else ''}{m} –º–∏–Ω)"
    step_buttons.append(KeyboardButton(label))
for i in range(0, len(step_buttons), 4):
    steps_keyboard.add(*step_buttons[i:i + 4])
steps_keyboard.add(KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))

def get_control_keyboard(step):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    kb.add(KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
    if step <= 2:
        kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ —à–∞–≥ 1 (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)"))
    else:
        kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞)"))
    kb.add(KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))
    return kb

def get_continue_keyboard(step):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
    kb.add(KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))
    if step <= 2:
        kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ —à–∞–≥ 1 (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)"))
    else:
        kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞)"))
    kb.add(KeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
    return kb

def get_end_keyboard(step):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º"))
    if step <= 2:
        kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ —à–∞–≥ 1 (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤)"))
    else:
        kb.add(KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞)"))
    return kb

GREETING = "..."
INFO_TEXT = "..."

user_state = {}
tasks = {}
step_completion_shown = set()

async def cancel_timer(uid):
    t = tasks.pop(uid, None)
    if t:
        t.cancel()

@dp.message_handler(commands=['start'])
async def send_welcome(msg: types.Message):
    await msg.answer(GREETING, reply_markup=steps_keyboard)

@dp.message_handler(commands=['info'])
@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def info(msg: types.Message):
    await msg.answer(INFO_TEXT)

@dp.message_handler(lambda m: m.text.startswith("–®–∞–≥ "))
async def handle_step(msg: types.Message):
    step = int(msg.text.split()[1])
    await cancel_timer(msg.chat.id)
    user_state[msg.chat.id] = {"step": step, "position": 0}
    step_completion_shown.discard(msg.chat.id)
    await start_position(msg.chat.id)

async def start_position(uid):
    await cancel_timer(uid)
    state = user_state.get(uid)
    if not state:
        return
    step = state["step"]
    pos = state["position"]
    if step > 12:
        await bot.send_message(uid, "–¢—ã –ø—Ä–æ—à—ë–ª(–ª–∞) 12 —à–∞–≥–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚òÄÔ∏è\n–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ.", reply_markup=get_end_keyboard(step))
        return
    try:
        name = POSITIONS[pos]
        dur = DURATIONS_MIN[step-1][pos]
        msg_text = f"{name} ‚Äî {format_duration(dur)}\n‚è≥ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω...\n‚òÄÔ∏èüåëüåëüåëüåëüåëüåëüåëüåëüåë"
        msg = await bot.send_message(uid, msg_text, reply_markup=get_control_keyboard(step))
        state["position"] += 1
        tasks[uid] = asyncio.create_task(timer(uid, int(dur * 60), msg.message_id))
    except IndexError:
        if uid not in step_completion_shown:
            step_completion_shown.add(uid)
            message = "–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–∏—Ä–∞–π ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –æ—Ç–¥–æ—Ö–Ω–∏ ‚òÄÔ∏è."
            if step <= 2:
                message += "\n–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –≤–µ—Ä–Ω–∏—Å—å –Ω–∞ —à–∞–≥ 1."
            else:
                message += "\n–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –≤–µ—Ä–Ω–∏—Å—å –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥."
            await bot.send_message(uid, message, reply_markup=get_continue_keyboard(step))

async def timer(uid, seconds, msg_id):
    start = time.monotonic()
    bar_states = ["‚òÄÔ∏èüåëüåëüåëüåëüåëüåëüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåëüåëüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåëüåëüåëüåë",
                  "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåëüåë",
                  "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåëüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåëüåë",
                  "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏èüåë", "‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è"]
    last_state = ""
    while True:
        elapsed = time.monotonic() - start
        remaining = max(0, int(seconds - elapsed))
        percent_done = min(elapsed / seconds, 1.0)
        bar_index = min(int(percent_done * 10), 9)
        bar = bar_states[bar_index]
        minutes = remaining // 60
        seconds_remain = remaining % 60
        time_label = f"{minutes} –º–∏–Ω {seconds_remain} —Å–µ–∫" if minutes > 0 else f"{seconds_remain} —Å–µ–∫"
        text = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {time_label}\n{bar}"
        if text != last_state:
            try:
                await bot.edit_message_text(text, chat_id=uid, message_id=msg_id)
            except:
                pass
            last_state = text
        if remaining <= 0:
            break
        await asyncio.sleep(2)
    if uid in user_state:
        await start_position(uid)

@dp.message_handler(lambda m: m.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip(msg: types.Message):
    await cancel_timer(msg.chat.id)
    await start_position(msg.chat.id)

@dp.message_handler(lambda m: m.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def end(msg: types.Message):
    uid = msg.chat.id
    await cancel_timer(uid)
    last_step = user_state.get(uid, {}).get("step", 1)
    user_state[uid] = {"last_step": last_step}
    step_completion_shown.discard(uid)
    await bot.send_message(uid, "–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è", reply_markup=get_end_keyboard(last_step))

@dp.message_handler(lambda m: m.text.startswith("‚Ü©Ô∏è"))
async def back(msg: types.Message):
    uid = msg.chat.id
    await cancel_timer(uid)
    state = user_state.get(uid, {})
    last = state.get("last_step", state.get("step", 1))
    new_step = 1 if last <= 2 else last - 2
    user_state[uid] = {"step": new_step, "position": 0}
    step_completion_shown.discard(uid)
    await bot.send_message(uid, f"–®–∞–≥ {new_step}")
    await start_position(uid)

@dp.message_handler(lambda m: m.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
async def menu(msg: types.Message):
    await cancel_timer(msg.chat.id)
    user_state.pop(msg.chat.id, None)
    step_completion_shown.discard(msg.chat.id)
    await msg.answer("–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=steps_keyboard)

@dp.message_handler(lambda m: m.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def continue_step(msg: types.Message):
    uid = msg.chat.id
    state = user_state.get(uid)
    if not state:
        return
    state["step"] += 1
    state["position"] = 0
    step_completion_shown.discard(uid)
    await bot.send_message(uid, f"–®–∞–≥ {state['step']}")
    await start_position(uid)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
