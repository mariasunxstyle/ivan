import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

from keyboards import steps_keyboard, get_control_keyboard, get_continue_keyboard, end_keyboard
from state import user_state, tasks, step_completion_shown
from steps import STEPS
from timer import run_timer
from texts import WELCOME_TEXT, INFO_TEXT

API_TOKEN = os.getenv("TOKEN")
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(WELCOME_TEXT, reply_markup=steps_keyboard())

@dp.message_handler(commands=["info"])
async def cmd_info(message: types.Message):
    await message.answer(INFO_TEXT, reply_markup=steps_keyboard())

@dp.message_handler(lambda msg: msg.text.startswith("–®–∞–≥"))
async def handle_step(msg: types.Message):
    try:
        step_number = int(msg.text.split()[1])
        user_state[msg.chat.id] = {"step": step_number, "position": 0}
        step_completion_shown[msg.chat.id] = False
        await start_position(msg.chat.id, bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —à–∞–≥–∞: {e}")

@dp.message_handler(lambda msg: msg.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_position(msg: types.Message):
    state = user_state.get(msg.chat.id)
    if not state:
        return
    state["position"] += 1
    await start_position(msg.chat.id, bot)

@dp.message_handler(lambda msg: msg.text == "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def finish_session(msg: types.Message):
    tasks.pop(msg.chat.id, None)
    step_completion_shown[msg.chat.id] = True
    await msg.answer(
        "–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è",
        reply_markup=end_keyboard()
    )

@dp.message_handler(lambda msg: msg.text.startswith("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
async def go_back_two_steps(msg: types.Message):
    state = user_state.get(msg.chat.id)
    if not state:
        return
    new_step = max(1, state["step"] - 2)
    user_state[msg.chat.id] = {"step": new_step, "position": 0}
    step_completion_shown[msg.chat.id] = False
    await start_position(msg.chat.id, bot)

@dp.message_handler(lambda msg: msg.text == "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º")
async def back_to_steps(msg: types.Message):
    tasks.pop(msg.chat.id, None)
    await msg.answer("–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=steps_keyboard())

@dp.message_handler(lambda msg: msg.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def continue_step(msg: types.Message):
    state = user_state.get(msg.chat.id)
    if not state:
        return
    await start_position(msg.chat.id, bot)

async def start_position(uid, bot):
    state = user_state.get(uid)
    if not state:
        return
    step = state["step"]
    position = state["position"]

    if step > len(STEPS):
        await bot.send_message(uid, "–¢—ã –ø—Ä–æ—à—ë–ª(–ª–∞) 12 —à–∞–≥–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚òÄÔ∏è\n–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–∞–≥–∞—Ä –≤ —Å–≤–æ—ë–º —Ä–∏—Ç–º–µ.", reply_markup=end_keyboard())
        return

    if position >= len(STEPS[step - 1]["positions"]):
        if not step_completion_shown.get(uid):
            step_completion_shown[uid] = True
            await bot.send_message(uid,
                "–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–∏—Ä–∞–π ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –æ—Ç–¥–æ—Ö–Ω–∏ ‚òÄÔ∏è.\n–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –≤–µ—Ä–Ω–∏—Å—å –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥.",
                reply_markup=get_continue_keyboard(step)
            )
        return

    pos = STEPS[step - 1]["positions"][position]
    dur = STEPS[step - 1]["duration_min"][position]
    msg = await bot.send_message(uid, f"{pos} ‚Äî {int(dur)} –º–∏–Ω", reply_markup=get_control_keyboard(step))
    tasks[uid] = asyncio.create_task(run_timer(bot, msg, dur * 60, uid))

